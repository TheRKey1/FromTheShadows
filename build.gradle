buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.1'
group = 'net.sonmok14.fromtheshadows' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'fromtheshadows'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
 
    mappings channel: 'official', version: '1.18.1'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory project.file('run')

         
            property 'forge.logging.markers', 'REGISTRIES'

       
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'fromtheshadows'

            mods {
                fromtheshadows {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')


            property 'forge.logging.markers', 'REGISTRIES'

       
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'fromtheshadows'

            mods {
                fromtheshadows{
                    source sourceSets.main
                }
            }
        }

   
        gameTestServer {
            workingDirectory project.file('run')

        
            property 'forge.logging.markers', 'REGISTRIES'

        
            property 'forge.logging.console.level', 'debug'

     
            property 'forge.enabledGameTestNamespaces', 'fromtheshadows'

            mods {
                fromtheshadows{
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'fromtheshadows', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                fromtheshadows{
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://maven.blamejared.com' }
      maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
}

dependencies {
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.1-65")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.1-65:api")
    minecraft 'net.minecraftforge:forge:1.18.1-39.1.0'
  implementation fg.deobf('software.bernie.geckolib:geckolib-1.18-forge:3.0.11')
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "from-the-shadows",
                "Specification-Vendor"    : "sonmok14",
                "Specification-Version"   : "1.1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "sonmok14",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
